'use strict';

var PQueue = require('p-queue');
var replaceAsync = require('string-replace-async');
var path = require('path');
var sharp = require('sharp');
var fs = require('fs');
var md5file = require('md5-file');
var crypto = require('crypto');
var nodeHtmlParser = require('node-html-parser');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            }
        });
    }
    n['default'] = e;
    return Object.freeze(n);
}

var PQueue__default = /*#__PURE__*/_interopDefaultLegacy(PQueue);
var replaceAsync__default = /*#__PURE__*/_interopDefaultLegacy(replaceAsync);
var sharp__default = /*#__PURE__*/_interopDefaultLegacy(sharp);
var fs__namespace = /*#__PURE__*/_interopNamespace(fs);
var md5file__default = /*#__PURE__*/_interopDefaultLegacy(md5file);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var Queue = /** @class */ (function () {
    function Queue(options) {
        this.cache = new Map();
        this.queue = new PQueue__default['default']({ concurrency: (options === null || options === void 0 ? void 0 : options.concurrency) || Infinity });
    }
    Queue.prototype.enqueue = function (func) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var cacheKey = func.name + "|" + JSON.stringify(args);
        if (this.cache.has(cacheKey)) {
            return this.cache.get(cacheKey);
        }
        var p = this.queue.add(function () { return func.apply(null, args); });
        this.cache.set(cacheKey, p);
        return p;
    };
    return Queue;
}());

function getSrcset(images) {
    return images.map(function (i) { return i.path + " " + i.width + "w"; }).join(', ');
}

function getComponentAttributes(input) {
    return {
        srcset: getSrcset(input.images),
        srcsetwebp: input.webpImages.length ? getSrcset(input.webpImages) : undefined,
        srcsetavif: input.avifImages.length ? getSrcset(input.avifImages) : undefined,
        placeholder: input.placeholder,
        aspectratio: input.aspectRatio,
    };
}

var pathSepPattern = /\\/g;
function stripPrefix(path, prefix) {
    prefix = prefix.replace(pathSepPattern, '/');
    if (!path.startsWith(prefix)) {
        return path;
    }
    return path.substring(prefix.length + (prefix.endsWith('/') ? 0 : 1));
}
function pathToUrl(path, options) {
    path = path.replace(pathSepPattern, '/');
    if (!options) {
        return path;
    }
    var inputDir = options.inputDir, src = options.src, outputDir = options.outputDir, publicPath = options.publicPath;
    if (publicPath) {
        if (outputDir) {
            path = stripPrefix(path, outputDir);
        }
        path = publicPath + (publicPath.endsWith('/') ? '' : '/') + path;
        return path;
    }
    if (inputDir) {
        path = stripPrefix(path, inputDir);
    }
    if (src && !path.startsWith('/') && /^\/[^\/]/.test(src)) {
        path = '/' + path;
    }
    return path;
}

// sharp only supports a very specific list of image formats,
// no point depending on a complete mime type database
function getMimeType(format) {
    switch (format) {
        case 'jpeg':
        case 'png':
        case 'webp':
        case 'avif':
        case 'tiff':
        case 'gif':
            return "image/" + format;
        case 'svg':
            return 'image/svg+xml';
    }
    return '';
}

function resizeImageToFile(inputFile, options, outputFile) {
    return resizeImage(inputFile, options, outputFile);
}
function resizeImage(inputFile, options, outputFile) {
    return __awaiter(this, void 0, void 0, function () {
        var sharpInstance;
        return __generator(this, function (_a) {
            if (!inputFile) {
                throw new Error('Input file is required');
            }
            sharpInstance = sharp__default['default'](inputFile);
            if (options.quality) {
                sharpInstance = sharpInstance.jpeg({
                    quality: options.quality,
                    force: false,
                }).png({
                    quality: options.quality,
                    force: false,
                }).webp({
                    quality: options.quality,
                    force: false,
                }).avif({
                    quality: options.quality,
                    force: false,
                });
            }
            sharpInstance = sharpInstance.resize(options.width, options.height);
            return [2 /*return*/, outputFile !== undefined ? sharpInstance.toFile(outputFile) : sharpInstance.toBuffer()];
        });
    });
}

function getImageMetadata(inputFile) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (!inputFile) {
                throw new Error('Input file is required');
            }
            return [2 /*return*/, sharp__default['default'](inputFile).metadata()];
        });
    });
}

var BLUR_WIDTH = 64;
function createPlaceholder(inputFile, queue) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, format, blurData, blur64, mime, href;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!inputFile) {
                        throw new Error('Input file is required');
                    }
                    return [4 /*yield*/, Promise.all([
                            queue.enqueue(getImageMetadata, inputFile),
                            queue.enqueue(resizeImage, inputFile, { width: BLUR_WIDTH })
                        ])];
                case 1:
                    _a = _b.sent(), format = _a[0].format, blurData = _a[1];
                    blur64 = blurData.toString('base64');
                    mime = getMimeType(format);
                    href = "data:" + mime + ";base64," + blur64;
                    return [2 /*return*/, href];
            }
        });
    });
}

function exists(file) {
    return __awaiter(this, void 0, void 0, function () {
        var err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!file) {
                        return [2 /*return*/, false];
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, fs__namespace.promises.access(file, fs__namespace.constants.F_OK)];
                case 2:
                    _a.sent();
                    return [2 /*return*/, true];
                case 3:
                    err_1 = _a.sent();
                    if (err_1.code === 'ENOENT') {
                        return [2 /*return*/, false];
                    }
                    throw Error(err_1);
                case 4: return [2 /*return*/];
            }
        });
    });
}

function ensureResizeImage(inputFile, outputFile, queue, options) {
    return __awaiter(this, void 0, void 0, function () {
        var width, height;
        var _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!inputFile) {
                        throw new Error('Input file is required');
                    }
                    if (!outputFile) {
                        throw new Error('Output file is required');
                    }
                    return [4 /*yield*/, queue.enqueue(exists, outputFile)];
                case 1:
                    if (!_c.sent()) return [3 /*break*/, 3];
                    return [4 /*yield*/, queue.enqueue(getImageMetadata, outputFile)];
                case 2:
                    (_a = _c.sent(), width = _a.width, height = _a.height);
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, queue.enqueue(resizeImageToFile, inputFile, {
                        width: options.width,
                        quality: options.quality,
                    }, outputFile)];
                case 4:
                    (_b = _c.sent(), width = _b.width, height = _b.height);
                    _c.label = 5;
                case 5: return [2 /*return*/, {
                        path: outputFile,
                        width: width,
                        height: height,
                    }];
            }
        });
    });
}

function resizeImageMultiple(inputFile, outputDir, queue, options) {
    return __awaiter(this, void 0, void 0, function () {
        var widthPaths, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!inputFile) {
                        throw new Error('Input file is required');
                    }
                    if (!outputDir) {
                        throw new Error('Output file is required');
                    }
                    widthPaths = options.widths.map(function (width) {
                        var outFile = options.filenameGenerator({ width: width, quality: options.quality, inputFile: inputFile });
                        if (!outFile) {
                            throw new Error('Output filename not provided');
                        }
                        return {
                            path: path.join(outputDir, outFile),
                            width: width,
                        };
                    });
                    if (!(options === null || options === void 0 ? void 0 : options.skipGeneration)) return [3 /*break*/, 1];
                    _a = widthPaths.map(function (_a) {
                        var path = _a.path, width = _a.width;
                        return ({
                            path: path,
                            width: width,
                            height: Math.round((width / options.aspectRatio + Number.EPSILON) * 100) / 100,
                        });
                    });
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, Promise.all(widthPaths.map(function (_a) {
                        var width = _a.width, path = _a.path;
                        return ensureResizeImage(inputFile, path, queue, { width: width, quality: options.quality });
                    }))];
                case 2:
                    _a = _b.sent();
                    _b.label = 3;
                case 3: return [2 /*return*/, _a];
            }
        });
    });
}

function getHash(content) {
    return crypto.createHash('md5').update(content).digest('hex');
}

function getOptionsHash(options, length) {
    var hash = getHash(Object.entries(options).map(function (_a) {
        var k = _a[0], v = _a[1];
        return k + "=" + v;
    }).join(','));
    return length ? hash.substring(0, length) : hash;
}

var DEFAULT_WIDTHS = [480, 1024, 1920, 2560];
var DEFAULT_WEBP = true;
var DEFAULT_AVIF = true;

function getProcessImageOptions(imageWidth, options) {
    var _a, _b, _c;
    var widths = (options === null || options === void 0 ? void 0 : options.widths) || DEFAULT_WIDTHS;
    widths = widths.filter(function (w) { return w <= imageWidth; });
    if (!((_a = options === null || options === void 0 ? void 0 : options.widths) === null || _a === void 0 ? void 0 : _a.length)) {
        if (!widths.length || imageWidth > Math.max.apply(Math, widths)) {
            // use original width if smaller or larger than all widths
            widths.push(imageWidth);
        }
    }
    var webp = (_b = options === null || options === void 0 ? void 0 : options.webp) !== null && _b !== void 0 ? _b : DEFAULT_WEBP;
    var avif = (_c = options === null || options === void 0 ? void 0 : options.avif) !== null && _c !== void 0 ? _c : DEFAULT_AVIF;
    return {
        widths: widths,
        quality: options === null || options === void 0 ? void 0 : options.quality,
        webp: webp,
        avif: avif,
    };
}

function processImage(inputFile, outputDir, queue, options) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, metadata, fileHash, _b, skipGeneration, restOpts, _c, widths, quality, webp, avif, filename, extension, baseFilename, aspectRatio, _d, images, webpImages, avifImages;
        var _this = this;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    if (!inputFile) {
                        throw new Error('Input file is required');
                    }
                    if (!outputDir) {
                        throw new Error('Output dir is required');
                    }
                    return [4 /*yield*/, Promise.all([
                            (function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!!(options === null || options === void 0 ? void 0 : options.skipGeneration)) return [3 /*break*/, 3];
                                            return [4 /*yield*/, queue.enqueue(exists, outputDir)];
                                        case 1:
                                            if (!!(_a.sent())) return [3 /*break*/, 3];
                                            return [4 /*yield*/, queue.enqueue(fs__namespace.promises.mkdir, outputDir, { recursive: true })];
                                        case 2:
                                            _a.sent();
                                            _a.label = 3;
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            }); })(),
                            queue.enqueue(getImageMetadata, inputFile),
                            queue.enqueue(md5file__default['default'], inputFile)
                        ])];
                case 1:
                    _a = _e.sent(), metadata = _a[1], fileHash = _a[2];
                    _b = options || {}, skipGeneration = _b.skipGeneration, restOpts = __rest(_b, ["skipGeneration"]);
                    _c = getProcessImageOptions(metadata.width, restOpts), widths = _c.widths, quality = _c.quality, webp = _c.webp, avif = _c.avif;
                    filename = path.basename(inputFile);
                    extension = path.extname(filename);
                    baseFilename = filename.substring(0, filename.length - extension.length);
                    aspectRatio = metadata.width / metadata.height;
                    return [4 /*yield*/, Promise.all([
                            resizeImageMultiple(inputFile, outputDir, queue, {
                                widths: widths,
                                quality: quality,
                                filenameGenerator: function (_a) {
                                    var width = _a.width, quality = _a.quality;
                                    return baseFilename + "." + getOptionsHash({ width: width, quality: quality }, 7) + "." + fileHash + extension;
                                },
                                aspectRatio: aspectRatio,
                                skipGeneration: skipGeneration,
                            }),
                            webp ? resizeImageMultiple(inputFile, outputDir, queue, {
                                widths: widths,
                                quality: quality,
                                filenameGenerator: function (_a) {
                                    var width = _a.width, quality = _a.quality;
                                    return baseFilename + "." + getOptionsHash({ width: width, quality: quality }, 7) + "." + fileHash + ".webp";
                                },
                                aspectRatio: aspectRatio,
                                skipGeneration: skipGeneration,
                            }) : [],
                            avif ? resizeImageMultiple(inputFile, outputDir, queue, {
                                widths: widths,
                                quality: quality,
                                filenameGenerator: function (_a) {
                                    var width = _a.width, quality = _a.quality;
                                    return baseFilename + "." + getOptionsHash({ width: width, quality: quality }, 7) + "." + fileHash + ".avif";
                                },
                                aspectRatio: aspectRatio,
                                skipGeneration: skipGeneration,
                            }) : [],
                        ])];
                case 2:
                    _d = _e.sent(), images = _d[0], webpImages = _d[1], avifImages = _d[2];
                    return [2 /*return*/, {
                            images: images,
                            webpImages: webpImages,
                            avifImages: avifImages,
                            aspectRatio: aspectRatio,
                        }];
            }
        });
    });
}

function generateComponentAttributes(_a) {
    var src = _a.src, queue = _a.queue, inputDir = _a.inputDir, outputDir = _a.outputDir, publicPath = _a.publicPath, webp = _a.webp, avif = _a.avif, widths = _a.widths, quality = _a.quality, skipGeneration = _a.skipGeneration, skipPlaceholder = _a.skipPlaceholder;
    return __awaiter(this, void 0, void 0, function () {
        var inputFile, outputDirReal, _b, _c, images, webpImages, avifImages, aspectRatio, placeholder;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (!src) {
                        throw new Error('Src is required');
                    }
                    if (!inputDir) {
                        throw new Error('Input dir is required');
                    }
                    if (!outputDir) {
                        throw new Error('Output dir is required');
                    }
                    queue = queue || new Queue();
                    inputFile = path.join(inputDir, src);
                    outputDirReal = path.join(outputDir, path.dirname(src));
                    return [4 /*yield*/, Promise.all([
                            processImage(inputFile, outputDirReal, queue, {
                                webp: webp !== null && webp !== void 0 ? webp : true,
                                avif: avif !== null && avif !== void 0 ? avif : true,
                                widths: widths,
                                skipGeneration: skipGeneration,
                                quality: quality,
                            }),
                            !skipPlaceholder ? createPlaceholder(inputFile, queue) : undefined,
                        ])];
                case 1:
                    _b = _d.sent(), _c = _b[0], images = _c.images, webpImages = _c.webpImages, avifImages = _c.avifImages, aspectRatio = _c.aspectRatio, placeholder = _b[1];
                    return [2 /*return*/, getComponentAttributes({
                            images: images.map(function (i) { return (__assign(__assign({}, i), { path: pathToUrl(i.path, { inputDir: inputDir, outputDir: outputDir, src: src, publicPath: publicPath }) })); }),
                            webpImages: webpImages.map(function (i) { return (__assign(__assign({}, i), { path: pathToUrl(i.path, { inputDir: inputDir, outputDir: outputDir, src: src, publicPath: publicPath }) })); }),
                            avifImages: avifImages.map(function (i) { return (__assign(__assign({}, i), { path: pathToUrl(i.path, { inputDir: inputDir, outputDir: outputDir, src: src, publicPath: publicPath }) })); }),
                            placeholder: placeholder,
                            aspectRatio: aspectRatio,
                        })];
            }
        });
    });
}

function formatAttribute(attribute, value) {
    if (!attribute || !value) {
        return '';
    }
    return value === true ? attribute : attribute + "=\"" + value + "\"";
}

function tryParseInt(val) {
    return val && /^[0-9]+$/.test(val) ? parseInt(val, 10) : undefined;
}

function parseAttributes(element) {
    if (!element) {
        return {};
    }
    var root = nodeHtmlParser.parse(element.replace(/[\r\n]+/g, ' '));
    if (!(root === null || root === void 0 ? void 0 : root.firstChild)) {
        return {};
    }
    var node = root.firstChild;
    if (!(node === null || node === void 0 ? void 0 : node.attributes)) {
        return {};
    }
    return Object.entries(node.attributes).reduce(function (rv, _a) {
        var attr = _a[0], val = _a[1];
        rv[attr] = val === '' ? attr : val; // so empty value attributes can be truthy
        return rv;
    }, {});
}

function processImageElement(element, queue, options) {
    return __awaiter(this, void 0, void 0, function () {
        var attrs, src, width, quality, immediate, newAttrs, attrString;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!element) {
                        return [2 /*return*/, element];
                    }
                    attrs = parseAttributes(element);
                    src = attrs['src'];
                    if (!src) {
                        return [2 /*return*/, element];
                    }
                    width = tryParseInt(attrs['width']);
                    quality = tryParseInt(attrs['quality']);
                    immediate = !!attrs['immediate'];
                    return [4 /*yield*/, generateComponentAttributes({
                            src: src,
                            queue: queue,
                            inputDir: options.inputDir,
                            outputDir: options.outputDir,
                            publicPath: options.publicPath || undefined,
                            webp: options.webp,
                            avif: options.avif,
                            widths: width ? [width] : undefined,
                            quality: quality,
                            skipPlaceholder: immediate || undefined,
                        })];
                case 1:
                    newAttrs = _a.sent();
                    attrString = Object.entries(newAttrs)
                        .map(function (_a) {
                        var attr = _a[0], val = _a[1];
                        return formatAttribute(attr, val);
                    })
                        .join(' ');
                    return [2 /*return*/, element.substring(0, 6) + ' ' + attrString + element.substring(6)];
            }
        });
    });
}

function imagePreprocessor(options) {
    var queue = new Queue();
    return {
        markup: function (_a) {
            var content = _a.content;
            return __awaiter(this, void 0, void 0, function () {
                var _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _b = {};
                            return [4 /*yield*/, replaceAsync__default['default'](content, /<Image[^>]+>/g, function (element) {
                                    return processImageElement(element, queue, options);
                                })];
                        case 1: return [2 /*return*/, (_b.code = _c.sent(),
                                _b)];
                    }
                });
            });
        },
    };
}

module.exports = imagePreprocessor;
